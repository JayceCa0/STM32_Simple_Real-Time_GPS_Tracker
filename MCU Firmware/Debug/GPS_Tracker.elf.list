
GPS_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002658  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000e0  20000000  08002798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  200000e0  08002878  000200e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001bc  08002878  000201bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000051ca  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001049  00000000  00000000  000252d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000500  00000000  00000000  00026320  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  00026820  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000283a  00000000  00000000  00026c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001787  00000000  00000000  000294c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002ac49  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000012bc  00000000  00000000  0002acc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800274c 	.word	0x0800274c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	0800274c 	.word	0x0800274c

0800014c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr

08000164 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000168:	f002 fa42 	bl	80025f0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800016c:	f002 fa02 	bl	8002574 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}

08000174 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800017a:	4a22      	ldr	r2, [pc, #136]	; (8000204 <HAL_MspInit+0x90>)
 800017c:	4b21      	ldr	r3, [pc, #132]	; (8000204 <HAL_MspInit+0x90>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6193      	str	r3, [r2, #24]
 8000186:	4b1f      	ldr	r3, [pc, #124]	; (8000204 <HAL_MspInit+0x90>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	f003 0301 	and.w	r3, r3, #1
 800018e:	607b      	str	r3, [r7, #4]
 8000190:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000192:	2003      	movs	r0, #3
 8000194:	f002 f99e 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000198:	2200      	movs	r2, #0
 800019a:	2100      	movs	r1, #0
 800019c:	f06f 000b 	mvn.w	r0, #11
 80001a0:	f002 f9a4 	bl	80024ec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80001a4:	2200      	movs	r2, #0
 80001a6:	2100      	movs	r1, #0
 80001a8:	f06f 000a 	mvn.w	r0, #10
 80001ac:	f002 f99e 	bl	80024ec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2100      	movs	r1, #0
 80001b4:	f06f 0009 	mvn.w	r0, #9
 80001b8:	f002 f998 	bl	80024ec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	2100      	movs	r1, #0
 80001c0:	f06f 0004 	mvn.w	r0, #4
 80001c4:	f002 f992 	bl	80024ec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2100      	movs	r1, #0
 80001cc:	f06f 0003 	mvn.w	r0, #3
 80001d0:	f002 f98c 	bl	80024ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80001d4:	2200      	movs	r2, #0
 80001d6:	2100      	movs	r1, #0
 80001d8:	f06f 0001 	mvn.w	r0, #1
 80001dc:	f002 f986 	bl	80024ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2100      	movs	r1, #0
 80001e4:	f04f 30ff 	mov.w	r0, #4294967295
 80001e8:	f002 f980 	bl	80024ec <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80001ec:	4a06      	ldr	r2, [pc, #24]	; (8000208 <HAL_MspInit+0x94>)
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <HAL_MspInit+0x94>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80001f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001fa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40021000 	.word	0x40021000
 8000208:	40010000 	.word	0x40010000

0800020c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b088      	sub	sp, #32
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2c      	ldr	r2, [pc, #176]	; (80002cc <HAL_UART_MspInit+0xc0>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d126      	bne.n	800026c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800021e:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <HAL_UART_MspInit+0xc4>)
 8000220:	4b2b      	ldr	r3, [pc, #172]	; (80002d0 <HAL_UART_MspInit+0xc4>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <HAL_UART_MspInit+0xc4>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_USART_TX_Pin;
 8000236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800023a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800023c:	2302      	movs	r3, #2
 800023e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000240:	2303      	movs	r3, #3
 8000242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPS_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4619      	mov	r1, r3
 800024a:	4822      	ldr	r0, [pc, #136]	; (80002d4 <HAL_UART_MspInit+0xc8>)
 800024c:	f001 ff1e 	bl	800208c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_USART_RX_Pin;
 8000250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPS_USART_RX_GPIO_Port, &GPIO_InitStruct);
 800025e:	f107 0310 	add.w	r3, r7, #16
 8000262:	4619      	mov	r1, r3
 8000264:	481b      	ldr	r0, [pc, #108]	; (80002d4 <HAL_UART_MspInit+0xc8>)
 8000266:	f001 ff11 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800026a:	e02a      	b.n	80002c2 <HAL_UART_MspInit+0xb6>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <HAL_UART_MspInit+0xcc>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d125      	bne.n	80002c2 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000276:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <HAL_UART_MspInit+0xc4>)
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <HAL_UART_MspInit+0xc4>)
 800027a:	69db      	ldr	r3, [r3, #28]
 800027c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000280:	61d3      	str	r3, [r2, #28]
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <HAL_UART_MspInit+0xc4>)
 8000284:	69db      	ldr	r3, [r3, #28]
 8000286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GSM_USART_TX_Pin;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000294:	2302      	movs	r3, #2
 8000296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000298:	2303      	movs	r3, #3
 800029a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GSM_USART_TX_GPIO_Port, &GPIO_InitStruct);
 800029c:	f107 0310 	add.w	r3, r7, #16
 80002a0:	4619      	mov	r1, r3
 80002a2:	480e      	ldr	r0, [pc, #56]	; (80002dc <HAL_UART_MspInit+0xd0>)
 80002a4:	f001 fef2 	bl	800208c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_USART_RX_Pin;
 80002a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GSM_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	4619      	mov	r1, r3
 80002bc:	4807      	ldr	r0, [pc, #28]	; (80002dc <HAL_UART_MspInit+0xd0>)
 80002be:	f001 fee5 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80002c2:	bf00      	nop
 80002c4:	3720      	adds	r7, #32
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40013800 	.word	0x40013800
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40004800 	.word	0x40004800
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <S_delay_ms>:
char x_text [50];
uint8_t flag_x = 0;
char st1[] = "AT+HTTPPARA=URL,http://www.tambovskiyvolk26.test.host-vrn.ru/get_location.php?raw_var=";
char st2[] = "\r\n";

void S_delay_ms(uint32_t ms){
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	long rr = ms*300;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002ee:	fb02 f303 	mul.w	r3, r2, r3
 80002f2:	60fb      	str	r3, [r7, #12]
	while (rr != 0){
 80002f4:	e002      	b.n	80002fc <S_delay_ms+0x1c>
		rr--;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	3b01      	subs	r3, #1
 80002fa:	60fb      	str	r3, [r7, #12]
char st1[] = "AT+HTTPPARA=URL,http://www.tambovskiyvolk26.test.host-vrn.ru/get_location.php?raw_var=";
char st2[] = "\r\n";

void S_delay_ms(uint32_t ms){
	long rr = ms*300;
	while (rr != 0){
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d1f9      	bne.n	80002f6 <S_delay_ms+0x16>
		rr--;
	}
}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <GPS_USART_RX_ISR>:

void GPS_USART_RX_ISR(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET){
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <GPS_USART_RX_ISR+0x28>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0320 	and.w	r3, r3, #32
 800031a:	2b00      	cmp	r3, #0
 800031c:	d007      	beq.n	800032e <GPS_USART_RX_ISR+0x22>
		ch = (uint8_t)((&huart1)->Instance->DR & (uint8_t)0x00FF);
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <GPS_USART_RX_ISR+0x28>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b04      	ldr	r3, [pc, #16]	; (8000338 <GPS_USART_RX_ISR+0x2c>)
 8000328:	701a      	strb	r2, [r3, #0]
		maincall_x();
 800032a:	f000 f88b 	bl	8000444 <maincall_x>
	}
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000178 	.word	0x20000178
 8000338:	200001b8 	.word	0x200001b8

0800033c <scan_for_dots>:
void scan_for_dots(){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
	while (i!=26){
 8000346:	e00b      	b.n	8000360 <scan_for_dots+0x24>
		if (x_text [i] == ','){
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	4a09      	ldr	r2, [pc, #36]	; (8000370 <scan_for_dots+0x34>)
 800034c:	5cd3      	ldrb	r3, [r2, r3]
 800034e:	2b2c      	cmp	r3, #44	; 0x2c
 8000350:	d103      	bne.n	800035a <scan_for_dots+0x1e>
			x_text [i] = 'y';
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <scan_for_dots+0x34>)
 8000356:	2179      	movs	r1, #121	; 0x79
 8000358:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	3301      	adds	r3, #1
 800035e:	71fb      	strb	r3, [r7, #7]
		maincall_x();
	}
}
void scan_for_dots(){
	uint8_t i = 0;
	while (i!=26){
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	2b1a      	cmp	r3, #26
 8000364:	d1f0      	bne.n	8000348 <scan_for_dots+0xc>
		if (x_text [i] == ','){
			x_text [i] = 'y';
		}
		i++;
	}
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	20000144 	.word	0x20000144

08000374 <init_devs>:
uint8_t comm_1[] = "AT+SAPBR=3,1,Contype,GPRS\r\n";
uint8_t comm_2[] = "AT+SAPBR=3,1,APN,3g.ge\r\n";
uint8_t comm_3[] = "AT+SAPBR=1,1\r\n";
uint8_t comm_4[] = "AT+HTTPINIT\r\n";
uint8_t comm_5[] = "AT+HTTPPARA=CID,1\r\n";
void init_devs(){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	//GSM Power On
	S_delay_ms(400000);
 8000378:	4827      	ldr	r0, [pc, #156]	; (8000418 <init_devs+0xa4>)
 800037a:	f7ff ffb1 	bl	80002e0 <S_delay_ms>
	HAL_GPIO_WritePin(GPIOC, GSM_PWRKEY_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	4825      	ldr	r0, [pc, #148]	; (800041c <init_devs+0xa8>)
 8000386:	f001 ffdf 	bl	8002348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GSM_PWRKEY_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000390:	4822      	ldr	r0, [pc, #136]	; (800041c <init_devs+0xa8>)
 8000392:	f001 ffd9 	bl	8002348 <HAL_GPIO_WritePin>
	S_delay_ms(400000);
 8000396:	4820      	ldr	r0, [pc, #128]	; (8000418 <init_devs+0xa4>)
 8000398:	f7ff ffa2 	bl	80002e0 <S_delay_ms>
	HAL_GPIO_WritePin(GPIOC, GSM_PWRKEY_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a2:	481e      	ldr	r0, [pc, #120]	; (800041c <init_devs+0xa8>)
 80003a4:	f001 ffd0 	bl	8002348 <HAL_GPIO_WritePin>
	//GSM Modem On
	S_delay_ms(800000);
 80003a8:	481d      	ldr	r0, [pc, #116]	; (8000420 <init_devs+0xac>)
 80003aa:	f7ff ff99 	bl	80002e0 <S_delay_ms>
	HAL_UART_Transmit(&huart3, comm_1, 27, 9000000);
 80003ae:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <init_devs+0xb0>)
 80003b0:	221b      	movs	r2, #27
 80003b2:	491d      	ldr	r1, [pc, #116]	; (8000428 <init_devs+0xb4>)
 80003b4:	481d      	ldr	r0, [pc, #116]	; (800042c <init_devs+0xb8>)
 80003b6:	f000 fa6d 	bl	8000894 <HAL_UART_Transmit>
	S_delay_ms(100000);
 80003ba:	481d      	ldr	r0, [pc, #116]	; (8000430 <init_devs+0xbc>)
 80003bc:	f7ff ff90 	bl	80002e0 <S_delay_ms>
	HAL_UART_Transmit(&huart3, comm_2, 24, 9000000);
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <init_devs+0xb0>)
 80003c2:	2218      	movs	r2, #24
 80003c4:	491b      	ldr	r1, [pc, #108]	; (8000434 <init_devs+0xc0>)
 80003c6:	4819      	ldr	r0, [pc, #100]	; (800042c <init_devs+0xb8>)
 80003c8:	f000 fa64 	bl	8000894 <HAL_UART_Transmit>
	S_delay_ms(100000);
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <init_devs+0xbc>)
 80003ce:	f7ff ff87 	bl	80002e0 <S_delay_ms>
	HAL_UART_Transmit(&huart3, comm_3, 14, 9000000);
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <init_devs+0xb0>)
 80003d4:	220e      	movs	r2, #14
 80003d6:	4918      	ldr	r1, [pc, #96]	; (8000438 <init_devs+0xc4>)
 80003d8:	4814      	ldr	r0, [pc, #80]	; (800042c <init_devs+0xb8>)
 80003da:	f000 fa5b 	bl	8000894 <HAL_UART_Transmit>
	S_delay_ms(100000);
 80003de:	4814      	ldr	r0, [pc, #80]	; (8000430 <init_devs+0xbc>)
 80003e0:	f7ff ff7e 	bl	80002e0 <S_delay_ms>
	HAL_UART_Transmit(&huart3, comm_4, 13, 9000000);
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <init_devs+0xb0>)
 80003e6:	220d      	movs	r2, #13
 80003e8:	4914      	ldr	r1, [pc, #80]	; (800043c <init_devs+0xc8>)
 80003ea:	4810      	ldr	r0, [pc, #64]	; (800042c <init_devs+0xb8>)
 80003ec:	f000 fa52 	bl	8000894 <HAL_UART_Transmit>
	S_delay_ms(100000);
 80003f0:	480f      	ldr	r0, [pc, #60]	; (8000430 <init_devs+0xbc>)
 80003f2:	f7ff ff75 	bl	80002e0 <S_delay_ms>
	HAL_UART_Transmit(&huart3, comm_5, 19, 9000000);
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <init_devs+0xb0>)
 80003f8:	2213      	movs	r2, #19
 80003fa:	4911      	ldr	r1, [pc, #68]	; (8000440 <init_devs+0xcc>)
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <init_devs+0xb8>)
 80003fe:	f000 fa49 	bl	8000894 <HAL_UART_Transmit>
	S_delay_ms(100000);
 8000402:	480b      	ldr	r0, [pc, #44]	; (8000430 <init_devs+0xbc>)
 8000404:	f7ff ff6c 	bl	80002e0 <S_delay_ms>
	HAL_GPIO_WritePin(GPIOC, LED_PWR_Pin, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <init_devs+0xa8>)
 800040e:	f001 ff9b 	bl	8002348 <HAL_GPIO_WritePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	00061a80 	.word	0x00061a80
 800041c:	40011000 	.word	0x40011000
 8000420:	000c3500 	.word	0x000c3500
 8000424:	00895440 	.word	0x00895440
 8000428:	2000005c 	.word	0x2000005c
 800042c:	20000104 	.word	0x20000104
 8000430:	000186a0 	.word	0x000186a0
 8000434:	20000078 	.word	0x20000078
 8000438:	20000094 	.word	0x20000094
 800043c:	200000a4 	.word	0x200000a4
 8000440:	200000b4 	.word	0x200000b4

08000444 <maincall_x>:

uint8_t comm_6[] = "AT+HTTPACTION=0\r\n";
void maincall_x(){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	if (ch == '$'){
 8000448:	4b4a      	ldr	r3, [pc, #296]	; (8000574 <maincall_x+0x130>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b24      	cmp	r3, #36	; 0x24
 800044e:	d102      	bne.n	8000456 <maincall_x+0x12>
		char_counter = 1;
 8000450:	4b49      	ldr	r3, [pc, #292]	; (8000578 <maincall_x+0x134>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
	}
	if (char_counter == 4){
 8000456:	4b48      	ldr	r3, [pc, #288]	; (8000578 <maincall_x+0x134>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b04      	cmp	r3, #4
 800045c:	d109      	bne.n	8000472 <maincall_x+0x2e>
		if (ch == 'G'){
 800045e:	4b45      	ldr	r3, [pc, #276]	; (8000574 <maincall_x+0x130>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b47      	cmp	r3, #71	; 0x47
 8000464:	d105      	bne.n	8000472 <maincall_x+0x2e>
			flag_x++;
 8000466:	4b45      	ldr	r3, [pc, #276]	; (800057c <maincall_x+0x138>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b43      	ldr	r3, [pc, #268]	; (800057c <maincall_x+0x138>)
 8000470:	701a      	strb	r2, [r3, #0]
		}
	}
	if (char_counter == 5){
 8000472:	4b41      	ldr	r3, [pc, #260]	; (8000578 <maincall_x+0x134>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b05      	cmp	r3, #5
 8000478:	d109      	bne.n	800048e <maincall_x+0x4a>
		if (ch == 'L'){
 800047a:	4b3e      	ldr	r3, [pc, #248]	; (8000574 <maincall_x+0x130>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b4c      	cmp	r3, #76	; 0x4c
 8000480:	d105      	bne.n	800048e <maincall_x+0x4a>
			flag_x++;
 8000482:	4b3e      	ldr	r3, [pc, #248]	; (800057c <maincall_x+0x138>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	3301      	adds	r3, #1
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b3c      	ldr	r3, [pc, #240]	; (800057c <maincall_x+0x138>)
 800048c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (char_counter == 6){
 800048e:	4b3a      	ldr	r3, [pc, #232]	; (8000578 <maincall_x+0x134>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b06      	cmp	r3, #6
 8000494:	d109      	bne.n	80004aa <maincall_x+0x66>
		if (ch == 'L'){
 8000496:	4b37      	ldr	r3, [pc, #220]	; (8000574 <maincall_x+0x130>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b4c      	cmp	r3, #76	; 0x4c
 800049c:	d105      	bne.n	80004aa <maincall_x+0x66>
			flag_x++;
 800049e:	4b37      	ldr	r3, [pc, #220]	; (800057c <maincall_x+0x138>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b35      	ldr	r3, [pc, #212]	; (800057c <maincall_x+0x138>)
 80004a8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (ch == '*'){
 80004aa:	4b32      	ldr	r3, [pc, #200]	; (8000574 <maincall_x+0x130>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b2a      	cmp	r3, #42	; 0x2a
 80004b0:	d138      	bne.n	8000524 <maincall_x+0xe0>
		if (flag_x == 3){
 80004b2:	4b32      	ldr	r3, [pc, #200]	; (800057c <maincall_x+0x138>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d12e      	bne.n	8000518 <maincall_x+0xd4>
			x_text[10] = 'x';
 80004ba:	4b31      	ldr	r3, [pc, #196]	; (8000580 <maincall_x+0x13c>)
 80004bc:	2278      	movs	r2, #120	; 0x78
 80004be:	729a      	strb	r2, [r3, #10]
			x_text[12] = 'x';
 80004c0:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <maincall_x+0x13c>)
 80004c2:	2278      	movs	r2, #120	; 0x78
 80004c4:	731a      	strb	r2, [r3, #12]
			x_text[24] = 'x';
 80004c6:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <maincall_x+0x13c>)
 80004c8:	2278      	movs	r2, #120	; 0x78
 80004ca:	761a      	strb	r2, [r3, #24]
			scan_for_dots();
 80004cc:	f7ff ff36 	bl	800033c <scan_for_dots>
			HAL_UART_Transmit(&huart3, st1, 86, 9000000);
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <maincall_x+0x140>)
 80004d2:	2256      	movs	r2, #86	; 0x56
 80004d4:	492c      	ldr	r1, [pc, #176]	; (8000588 <maincall_x+0x144>)
 80004d6:	482d      	ldr	r0, [pc, #180]	; (800058c <maincall_x+0x148>)
 80004d8:	f000 f9dc 	bl	8000894 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, x_text, char_counter_tmp+1, 9000000);
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <maincall_x+0x14c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	3301      	adds	r3, #1
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	4b27      	ldr	r3, [pc, #156]	; (8000584 <maincall_x+0x140>)
 80004e8:	4925      	ldr	r1, [pc, #148]	; (8000580 <maincall_x+0x13c>)
 80004ea:	4828      	ldr	r0, [pc, #160]	; (800058c <maincall_x+0x148>)
 80004ec:	f000 f9d2 	bl	8000894 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, st2, 2, 9000000);
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <maincall_x+0x140>)
 80004f2:	2202      	movs	r2, #2
 80004f4:	4927      	ldr	r1, [pc, #156]	; (8000594 <maincall_x+0x150>)
 80004f6:	4825      	ldr	r0, [pc, #148]	; (800058c <maincall_x+0x148>)
 80004f8:	f000 f9cc 	bl	8000894 <HAL_UART_Transmit>
			S_delay_ms(5000);
 80004fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000500:	f7ff feee 	bl	80002e0 <S_delay_ms>
			HAL_UART_Transmit(&huart3, comm_6, 17, 9000000);
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <maincall_x+0x140>)
 8000506:	2211      	movs	r2, #17
 8000508:	4923      	ldr	r1, [pc, #140]	; (8000598 <maincall_x+0x154>)
 800050a:	4820      	ldr	r0, [pc, #128]	; (800058c <maincall_x+0x148>)
 800050c:	f000 f9c2 	bl	8000894 <HAL_UART_Transmit>
			S_delay_ms(50000);
 8000510:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000514:	f7ff fee4 	bl	80002e0 <S_delay_ms>
		}
		flag_x = 0;
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <maincall_x+0x138>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
		char_counter = 0;
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <maincall_x+0x134>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
	}
	if (0 < char_counter){
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <maincall_x+0x134>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d021      	beq.n	8000570 <maincall_x+0x12c>
		if (char_counter < 34){
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <maincall_x+0x134>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b21      	cmp	r3, #33	; 0x21
 8000532:	d81d      	bhi.n	8000570 <maincall_x+0x12c>
			if (flag_x == 3){
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <maincall_x+0x138>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d113      	bne.n	8000564 <maincall_x+0x120>
				char_counter_tmp = char_counter-8;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <maincall_x+0x134>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	3b08      	subs	r3, #8
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <maincall_x+0x14c>)
 8000546:	701a      	strb	r2, [r3, #0]
				x_text [char_counter_tmp] = ch;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <maincall_x+0x14c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <maincall_x+0x130>)
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <maincall_x+0x13c>)
 8000554:	5499      	strb	r1, [r3, r2]
				char_counter++;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <maincall_x+0x134>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <maincall_x+0x134>)
 8000560:	701a      	strb	r2, [r3, #0]
			else {
				char_counter++;
			}
		}
	}
}
 8000562:	e005      	b.n	8000570 <maincall_x+0x12c>
				char_counter_tmp = char_counter-8;
				x_text [char_counter_tmp] = ch;
				char_counter++;
			}
			else {
				char_counter++;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <maincall_x+0x134>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <maincall_x+0x134>)
 800056e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200001b8 	.word	0x200001b8
 8000578:	200000fc 	.word	0x200000fc
 800057c:	200000fe 	.word	0x200000fe
 8000580:	20000144 	.word	0x20000144
 8000584:	00895440 	.word	0x00895440
 8000588:	20000000 	.word	0x20000000
 800058c:	20000104 	.word	0x20000104
 8000590:	200000fd 	.word	0x200000fd
 8000594:	20000058 	.word	0x20000058
 8000598:	200000c8 	.word	0x200000c8

0800059c <main>:

/* USER CODE END 0 */

int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 fff4 	bl	800258c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f80c 	bl	80005c0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8aa 	bl	8000700 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 f854 	bl	8000658 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005b0:	f000 f87c 	bl	80006ac <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  init_devs();
 80005b4:	f7ff fede 	bl	8000374 <init_devs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GPS_USART_RX_ISR();
 80005b8:	f7ff fea8 	bl	800030c <GPS_USART_RX_ISR>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 80005bc:	e7fc      	b.n	80005b8 <main+0x1c>
 80005be:	bf00      	nop

080005c0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b090      	sub	sp, #64	; 0x40
 80005c4:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fbab 	bl	8000d44 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x38>
  {
    Error_Handler();
 80005f4:	f000 f900 	bl	80007f8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800060e:	617b      	str	r3, [r7, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2102      	movs	r1, #2
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fab5 	bl	8001b84 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000620:	f000 f8ea 	bl	80007f8 <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000624:	f001 fce4 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8000628:	4602      	mov	r2, r0
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <SystemClock_Config+0x94>)
 800062c:	fba3 2302 	umull	r2, r3, r3, r2
 8000630:	099b      	lsrs	r3, r3, #6
 8000632:	4618      	mov	r0, r3
 8000634:	f001 ff76 	bl	8002524 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000638:	2004      	movs	r0, #4
 800063a:	f001 ff7f 	bl	800253c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	f04f 30ff 	mov.w	r0, #4294967295
 8000646:	f001 ff51 	bl	80024ec <HAL_NVIC_SetPriority>
}
 800064a:	bf00      	nop
 800064c:	3740      	adds	r7, #64	; 0x40
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	10624dd3 	.word	0x10624dd3

08000658 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART1_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000690:	f000 f8b6 	bl	8000800 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f8ad 	bl	80007f8 <Error_Handler>
  }

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000178 	.word	0x20000178
 80006a8:	40013800 	.word	0x40013800

080006ac <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART3_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006e4:	f000 f88c 	bl	8000800 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f883 	bl	80007f8 <Error_Handler>
  }

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000104 	.word	0x20000104
 80006fc:	40004800 	.word	0x40004800

08000700 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4a38      	ldr	r2, [pc, #224]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000708:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <MX_GPIO_Init+0xe8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	4a32      	ldr	r2, [pc, #200]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <MX_GPIO_Init+0xe8>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_GPIO_Init+0xe8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xe8>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_GPIO_Init+0xec>)
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	481d      	ldr	r0, [pc, #116]	; (80007f0 <MX_GPIO_Init+0xf0>)
 800077c:	f001 fc86 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000780:	230c      	movs	r3, #12
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2302      	movs	r3, #2
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xf4>)
 8000794:	f001 fc7a 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000798:	2320      	movs	r3, #32
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MX_GPIO_Init+0xf4>)
 80007ac:	f001 fc6e 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PWR_Pin GSM_PWRKEY_Pin */
  GPIO_InitStruct.Pin = LED_PWR_Pin|GSM_PWRKEY_Pin;
 80007b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007b6:	2311      	movs	r3, #17
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <MX_GPIO_Init+0xf0>)
 80007c6:	f001 fc61 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_GPIO_Init+0xf4>)
 80007d0:	f001 fdba 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_PWR_Pin|GSM_PWRKEY_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_GPIO_Init+0xf0>)
 80007dc:	f001 fdb4 	bl	8002348 <HAL_GPIO_WritePin>

}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	10120000 	.word	0x10120000
 80007f0:	40011000 	.word	0x40011000
 80007f4:	40010800 	.word	0x40010800

080007f8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x4>
 80007fe:	bf00      	nop

08000800 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e03b      	b.n	800088a <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d106      	bne.n	800082c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fcf0 	bl	800020c <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2202      	movs	r2, #2
 8000830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	68d2      	ldr	r2, [r2, #12]
 800083e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000842:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f967 	bl	8000b18 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	6912      	ldr	r2, [r2, #16]
 8000854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	6952      	ldr	r2, [r2, #20]
 8000864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000868:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	68d2      	ldr	r2, [r2, #12]
 8000874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000878:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop

08000894 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	4613      	mov	r3, r2
 80008a2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d003      	beq.n	80008c0 <HAL_UART_Transmit+0x2c>
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	2b22      	cmp	r3, #34	; 0x22
 80008bc:	f040 808d 	bne.w	80009da <HAL_UART_Transmit+0x146>
  {
    if((pData == NULL) || (Size == 0))
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <HAL_UART_Transmit+0x38>
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e085      	b.n	80009dc <HAL_UART_Transmit+0x148>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d101      	bne.n	80008de <HAL_UART_Transmit+0x4a>
 80008da:	2302      	movs	r3, #2
 80008dc:	e07e      	b.n	80009dc <HAL_UART_Transmit+0x148>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2200      	movs	r2, #0
 80008ea:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b22      	cmp	r3, #34	; 0x22
 80008f6:	d104      	bne.n	8000902 <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2232      	movs	r2, #50	; 0x32
 80008fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000900:	e003      	b.n	800090a <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2212      	movs	r2, #18
 8000906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	88fa      	ldrh	r2, [r7, #6]
 800090e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	88fa      	ldrh	r2, [r7, #6]
 8000914:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 8000916:	e03c      	b.n	8000992 <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800091c:	3b01      	subs	r3, #1
 800091e:	b29a      	uxth	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800092c:	d11f      	bne.n	800096e <HAL_UART_Transmit+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f000 f855 	bl	80009e4 <UART_WaitOnFlagUntilTimeout>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 8000940:	2303      	movs	r3, #3
 8000942:	e04b      	b.n	80009dc <HAL_UART_Transmit+0x148>
        }
        tmp = (uint16_t*) pData;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000954:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <HAL_UART_Transmit+0xd2>
        {
          pData +=2;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	3302      	adds	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	e015      	b.n	8000992 <HAL_UART_Transmit+0xfe>
        }
        else
        { 
          pData +=1;
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	3301      	adds	r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	e011      	b.n	8000992 <HAL_UART_Transmit+0xfe>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f835 	bl	80009e4 <UART_WaitOnFlagUntilTimeout>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_UART_Transmit+0xf0>
        {
          return HAL_TIMEOUT;
 8000980:	2303      	movs	r3, #3
 8000982:	e02b      	b.n	80009dc <HAL_UART_Transmit+0x148>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c59      	adds	r1, r3, #1
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	6053      	str	r3, [r2, #4]
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1be      	bne.n	8000918 <HAL_UART_Transmit+0x84>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2200      	movs	r2, #0
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f000 f81f 	bl	80009e4 <UART_WaitOnFlagUntilTimeout>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_UART_Transmit+0x11c>
    { 
      return HAL_TIMEOUT;
 80009ac:	2303      	movs	r3, #3
 80009ae:	e015      	b.n	80009dc <HAL_UART_Transmit+0x148>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b32      	cmp	r3, #50	; 0x32
 80009ba:	d104      	bne.n	80009c6 <HAL_UART_Transmit+0x132>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2222      	movs	r2, #34	; 0x22
 80009c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80009c4:	e003      	b.n	80009ce <HAL_UART_Transmit+0x13a>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2201      	movs	r2, #1
 80009ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80009da:	2302      	movs	r3, #2
  }
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80009f8:	f001 fe08 	bl	800260c <HAL_GetTick>
 80009fc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d17b      	bne.n	8000afc <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8000a04:	e038      	b.n	8000a78 <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d034      	beq.n	8000a78 <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d007      	beq.n	8000a24 <UART_WaitOnFlagUntilTimeout+0x40>
 8000a14:	f001 fdfa 	bl	800260c <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	1ad2      	subs	r2, r2, r3
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d929      	bls.n	8000a78 <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	68d2      	ldr	r2, [r2, #12]
 8000a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a32:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	68d2      	ldr	r2, [r2, #12]
 8000a3e:	f022 0220 	bic.w	r2, r2, #32
 8000a42:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	68d2      	ldr	r2, [r2, #12]
 8000a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a52:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	6812      	ldr	r2, [r2, #0]
 8000a5c:	6952      	ldr	r2, [r2, #20]
 8000a5e:	f022 0201 	bic.w	r2, r2, #1
 8000a62:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000a74:	2303      	movs	r3, #3
 8000a76:	e04a      	b.n	8000b0e <UART_WaitOnFlagUntilTimeout+0x12a>
  tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	401a      	ands	r2, r3
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d1be      	bne.n	8000a06 <UART_WaitOnFlagUntilTimeout+0x22>
 8000a88:	e040      	b.n	8000b0c <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a90:	d034      	beq.n	8000afc <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d007      	beq.n	8000aa8 <UART_WaitOnFlagUntilTimeout+0xc4>
 8000a98:	f001 fdb8 	bl	800260c <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	1ad2      	subs	r2, r2, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d929      	bls.n	8000afc <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	68d2      	ldr	r2, [r2, #12]
 8000ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ab6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	68d2      	ldr	r2, [r2, #12]
 8000ac2:	f022 0220 	bic.w	r2, r2, #32
 8000ac6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	6812      	ldr	r2, [r2, #0]
 8000ad0:	68d2      	ldr	r2, [r2, #12]
 8000ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ad6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	6952      	ldr	r2, [r2, #20]
 8000ae2:	f022 0201 	bic.w	r2, r2, #1
 8000ae6:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2201      	movs	r2, #1
 8000aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e008      	b.n	8000b0e <UART_WaitOnFlagUntilTimeout+0x12a>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	401a      	ands	r2, r3
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d0be      	beq.n	8000a8a <UART_WaitOnFlagUntilTimeout+0xa6>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop

08000b18 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	6912      	ldr	r2, [r2, #16]
 8000b2e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68d2      	ldr	r2, [r2, #12]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000b5a:	f023 030c 	bic.w	r3, r3, #12
 8000b5e:	68f9      	ldr	r1, [r7, #12]
 8000b60:	430b      	orrs	r3, r1
 8000b62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	6952      	ldr	r2, [r2, #20]
 8000b6e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6992      	ldr	r2, [r2, #24]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a6f      	ldr	r2, [pc, #444]	; (8000d3c <UART_SetConfig+0x224>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d16b      	bne.n	8000c5c <UART_SetConfig+0x144>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681c      	ldr	r4, [r3, #0]
 8000b88:	f001 fa5e 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	009a      	lsls	r2, r3, #2
 8000b96:	441a      	add	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4a67      	ldr	r2, [pc, #412]	; (8000d40 <UART_SetConfig+0x228>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	095b      	lsrs	r3, r3, #5
 8000baa:	011d      	lsls	r5, r3, #4
 8000bac:	f001 fa4c 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009a      	lsls	r2, r3, #2
 8000bba:	441a      	add	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8000bc6:	f001 fa3f 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009a      	lsls	r2, r3, #2
 8000bd4:	441a      	add	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be0:	4a57      	ldr	r2, [pc, #348]	; (8000d40 <UART_SetConfig+0x228>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2264      	movs	r2, #100	; 0x64
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	1af3      	subs	r3, r6, r3
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	3332      	adds	r3, #50	; 0x32
 8000bf4:	4a52      	ldr	r2, [pc, #328]	; (8000d40 <UART_SetConfig+0x228>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c00:	441d      	add	r5, r3
 8000c02:	f001 fa21 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 8000c06:	4602      	mov	r2, r0
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009a      	lsls	r2, r3, #2
 8000c10:	441a      	add	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	fbb2 f6f3 	udiv	r6, r2, r3
 8000c1c:	f001 fa14 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 8000c20:	4602      	mov	r2, r0
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	009a      	lsls	r2, r3, #2
 8000c2a:	441a      	add	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <UART_SetConfig+0x228>)
 8000c38:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3c:	095b      	lsrs	r3, r3, #5
 8000c3e:	2264      	movs	r2, #100	; 0x64
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	1af3      	subs	r3, r6, r3
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	3332      	adds	r3, #50	; 0x32
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <UART_SetConfig+0x228>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	095b      	lsrs	r3, r3, #5
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	442b      	add	r3, r5
 8000c58:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8000c5a:	e06a      	b.n	8000d32 <UART_SetConfig+0x21a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	f001 f9d0 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8000c64:	4602      	mov	r2, r0
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	009a      	lsls	r2, r3, #2
 8000c6e:	441a      	add	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <UART_SetConfig+0x228>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	095b      	lsrs	r3, r3, #5
 8000c82:	011d      	lsls	r5, r3, #4
 8000c84:	f001 f9be 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	009a      	lsls	r2, r3, #2
 8000c92:	441a      	add	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8000c9e:	f001 f9b1 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	009a      	lsls	r2, r3, #2
 8000cac:	441a      	add	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <UART_SetConfig+0x228>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2264      	movs	r2, #100	; 0x64
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	1af3      	subs	r3, r6, r3
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	3332      	adds	r3, #50	; 0x32
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <UART_SetConfig+0x228>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cd8:	441d      	add	r5, r3
 8000cda:	f001 f993 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009a      	lsls	r2, r3, #2
 8000ce8:	441a      	add	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8000cf4:	f001 f986 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	009a      	lsls	r2, r3, #2
 8000d02:	441a      	add	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <UART_SetConfig+0x228>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	095b      	lsrs	r3, r3, #5
 8000d16:	2264      	movs	r2, #100	; 0x64
 8000d18:	fb02 f303 	mul.w	r3, r2, r3
 8000d1c:	1af3      	subs	r3, r6, r3
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	3332      	adds	r3, #50	; 0x32
 8000d22:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <UART_SetConfig+0x228>)
 8000d24:	fba2 2303 	umull	r2, r3, r2, r3
 8000d28:	095b      	lsrs	r3, r3, #5
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	442b      	add	r3, r5
 8000d30:	60a3      	str	r3, [r4, #8]
  }
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	51eb851f 	.word	0x51eb851f

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b0e5      	sub	sp, #404	; 0x194
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8175 	beq.w	800104e <HAL_RCC_OscConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d64:	4bb8      	ldr	r3, [pc, #736]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d00b      	beq.n	8000d88 <HAL_RCC_OscConfig+0x44>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d70:	4bb5      	ldr	r3, [pc, #724]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d15f      	bne.n	8000e3c <HAL_RCC_OscConfig+0xf8>
 8000d7c:	4bb2      	ldr	r3, [pc, #712]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d059      	beq.n	8000e3c <HAL_RCC_OscConfig+0xf8>
 8000d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	f043 0320 	orr.w	r3, r3, #32
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <HAL_RCC_OscConfig+0x78>
 8000db6:	4ba4      	ldr	r3, [pc, #656]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	e01b      	b.n	8000df4 <HAL_RCC_OscConfig+0xb0>
 8000dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000dc8:	fa93 f3a3 	rbit	r3, r3
 8000dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000dd4:	fab3 f383 	clz	r3, r3
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	f043 0320 	orr.w	r3, r3, #32
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d102      	bne.n	8000df0 <HAL_RCC_OscConfig+0xac>
 8000dea:	4b97      	ldr	r3, [pc, #604]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	e001      	b.n	8000df4 <HAL_RCC_OscConfig+0xb0>
 8000df0:	4b95      	ldr	r3, [pc, #596]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000e00:	fa92 f2a2 	rbit	r2, r2
 8000e04:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000e0c:	fab2 f282 	clz	r2, r2
 8000e10:	b252      	sxtb	r2, r2
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	b252      	sxtb	r2, r2
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	f002 021f 	and.w	r2, r2, #31
 8000e1e:	40d3      	lsrs	r3, r2
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 8111 	beq.w	800104c <HAL_RCC_OscConfig+0x308>
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f040 810b 	bne.w	800104c <HAL_RCC_OscConfig+0x308>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f000 be9d 	b.w	8001b76 <HAL_RCC_OscConfig+0xe32>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e46:	d106      	bne.n	8000e56 <HAL_RCC_OscConfig+0x112>
 8000e48:	4a7f      	ldr	r2, [pc, #508]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e4a:	4b7f      	ldr	r3, [pc, #508]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e030      	b.n	8000eb8 <HAL_RCC_OscConfig+0x174>
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10c      	bne.n	8000e7a <HAL_RCC_OscConfig+0x136>
 8000e60:	4a79      	ldr	r2, [pc, #484]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e62:	4b79      	ldr	r3, [pc, #484]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4a76      	ldr	r2, [pc, #472]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e6e:	4b76      	ldr	r3, [pc, #472]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e01e      	b.n	8000eb8 <HAL_RCC_OscConfig+0x174>
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x15c>
 8000e86:	4a70      	ldr	r2, [pc, #448]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e88:	4b6f      	ldr	r3, [pc, #444]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4a6d      	ldr	r2, [pc, #436]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e94:	4b6c      	ldr	r3, [pc, #432]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e00b      	b.n	8000eb8 <HAL_RCC_OscConfig+0x174>
 8000ea0:	4a69      	ldr	r2, [pc, #420]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000ea2:	4b69      	ldr	r3, [pc, #420]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4a66      	ldr	r2, [pc, #408]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000eae:	4b66      	ldr	r3, [pc, #408]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d060      	beq.n	8000f84 <HAL_RCC_OscConfig+0x240>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f001 fba3 	bl	800260c <HAL_GetTick>
 8000ec6:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	e00a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ecc:	f001 fb9e 	bl	800260c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b64      	cmp	r3, #100	; 0x64
 8000eda:	d902      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f000 be4a 	b.w	8001b76 <HAL_RCC_OscConfig+0xe32>
 8000ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000eee:	fa93 f3a3 	rbit	r3, r3
 8000ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ef6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	095b      	lsrs	r3, r3, #5
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d102      	bne.n	8000f16 <HAL_RCC_OscConfig+0x1d2>
 8000f10:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	e01b      	b.n	8000f4e <HAL_RCC_OscConfig+0x20a>
 8000f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f2e:	fab3 f383 	clz	r3, r3
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	095b      	lsrs	r3, r3, #5
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d102      	bne.n	8000f4a <HAL_RCC_OscConfig+0x206>
 8000f44:	4b40      	ldr	r3, [pc, #256]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	e001      	b.n	8000f4e <HAL_RCC_OscConfig+0x20a>
 8000f4a:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f52:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000f5a:	fa92 f2a2 	rbit	r2, r2
 8000f5e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000f66:	fab2 f282 	clz	r2, r2
 8000f6a:	b252      	sxtb	r2, r2
 8000f6c:	f042 0220 	orr.w	r2, r2, #32
 8000f70:	b252      	sxtb	r2, r2
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	f002 021f 	and.w	r2, r2, #31
 8000f78:	40d3      	lsrs	r3, r2
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0a4      	beq.n	8000ecc <HAL_RCC_OscConfig+0x188>
 8000f82:	e064      	b.n	800104e <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f001 fb42 	bl	800260c <HAL_GetTick>
 8000f88:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8c:	e00a      	b.n	8000fa4 <HAL_RCC_OscConfig+0x260>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8e:	f001 fb3d 	bl	800260c <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d902      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	f000 bde9 	b.w	8001b76 <HAL_RCC_OscConfig+0xe32>
 8000fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbc:	fab3 f383 	clz	r3, r3
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x294>
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	e01b      	b.n	8001010 <HAL_RCC_OscConfig+0x2cc>
 8000fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fdc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x2c8>
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	e001      	b.n	8001010 <HAL_RCC_OscConfig+0x2cc>
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_RCC_OscConfig+0x304>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001014:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001018:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800101c:	fa92 f2a2 	rbit	r2, r2
 8001020:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001024:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001028:	fab2 f282 	clz	r2, r2
 800102c:	b252      	sxtb	r2, r2
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	b252      	sxtb	r2, r2
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f002 021f 	and.w	r2, r2, #31
 800103a:	40d3      	lsrs	r3, r2
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1a4      	bne.n	8000f8e <HAL_RCC_OscConfig+0x24a>
 8001044:	e003      	b.n	800104e <HAL_RCC_OscConfig+0x30a>
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 8198 	beq.w	800138e <HAL_RCC_OscConfig+0x64a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800105e:	4bbc      	ldr	r3, [pc, #752]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <HAL_RCC_OscConfig+0x33e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800106a:	4bb9      	ldr	r3, [pc, #740]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b08      	cmp	r3, #8
 8001074:	d174      	bne.n	8001160 <HAL_RCC_OscConfig+0x41c>
 8001076:	4bb6      	ldr	r3, [pc, #728]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d16e      	bne.n	8001160 <HAL_RCC_OscConfig+0x41c>
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x370>
 80010ae:	4ba8      	ldr	r3, [pc, #672]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	e01a      	b.n	80010ea <HAL_RCC_OscConfig+0x3a6>
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d102      	bne.n	80010e6 <HAL_RCC_OscConfig+0x3a2>
 80010e0:	4b9b      	ldr	r3, [pc, #620]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	e001      	b.n	80010ea <HAL_RCC_OscConfig+0x3a6>
 80010e6:	4b9a      	ldr	r3, [pc, #616]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	2202      	movs	r2, #2
 80010ec:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80010f4:	fa92 f2a2 	rbit	r2, r2
 80010f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010fc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001100:	fab2 f282 	clz	r2, r2
 8001104:	b252      	sxtb	r2, r2
 8001106:	f042 0220 	orr.w	r2, r2, #32
 800110a:	b252      	sxtb	r2, r2
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	f002 021f 	and.w	r2, r2, #31
 8001112:	40d3      	lsrs	r3, r2
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d007      	beq.n	800112c <HAL_RCC_OscConfig+0x3e8>
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d002      	beq.n	800112c <HAL_RCC_OscConfig+0x3e8>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	f000 bd25 	b.w	8001b76 <HAL_RCC_OscConfig+0xe32>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4888      	ldr	r0, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6959      	ldr	r1, [r3, #20]
 800113c:	23f8      	movs	r3, #248	; 0xf8
 800113e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001142:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800114e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e116      	b.n	800138e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8094 	beq.w	8001294 <HAL_RCC_OscConfig+0x550>
 800116c:	2301      	movs	r3, #1
 800116e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800117e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800118c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001190:	461a      	mov	r2, r3
 8001192:	2301      	movs	r3, #1
 8001194:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f001 fa39 	bl	800260c <HAL_GetTick>
 800119a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a0:	f001 fa34 	bl	800260c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d902      	bls.n	80011b6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f000 bce0 	b.w	8001b76 <HAL_RCC_OscConfig+0xe32>
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80011c0:	fa93 f2a3 	rbit	r2, r3
 80011c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011c8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011ce:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	fab3 f383 	clz	r3, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d102      	bne.n	80011ec <HAL_RCC_OscConfig+0x4a8>
 80011e6:	4b5a      	ldr	r3, [pc, #360]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	e01c      	b.n	8001226 <HAL_RCC_OscConfig+0x4e2>
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011f6:	fa93 f2a3 	rbit	r2, r3
 80011fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011fe:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001200:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b25b      	sxtb	r3, r3
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	b25b      	sxtb	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d102      	bne.n	8001222 <HAL_RCC_OscConfig+0x4de>
 800121c:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	e001      	b.n	8001226 <HAL_RCC_OscConfig+0x4e2>
 8001222:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	2202      	movs	r2, #2
 8001228:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001230:	fa92 f1a2 	rbit	r1, r2
 8001234:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001238:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800123a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	fab2 f282 	clz	r2, r2
 8001244:	b252      	sxtb	r2, r2
 8001246:	f042 0220 	orr.w	r2, r2, #32
 800124a:	b252      	sxtb	r2, r2
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	f002 021f 	and.w	r2, r2, #31
 8001252:	40d3      	lsrs	r3, r2
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0a1      	beq.n	80011a0 <HAL_RCC_OscConfig+0x45c>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4c3c      	ldr	r4, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6959      	ldr	r1, [r3, #20]
 800126c:	23f8      	movs	r3, #248	; 0xf8
 800126e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001276:	fa93 f0a3 	rbit	r0, r3
 800127a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800127e:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001280:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	e07c      	b.n	800138e <HAL_RCC_OscConfig+0x64a>
 8001294:	2301      	movs	r3, #1
 8001296:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800129e:	fa93 f2a3 	rbit	r2, r3
 80012a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012a6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012ac:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80012b8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80012bc:	461a      	mov	r2, r3
 80012be:	2300      	movs	r3, #0
 80012c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f001 f9a3 	bl	800260c <HAL_GetTick>
 80012c6:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012cc:	f001 f99e 	bl	800260c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d902      	bls.n	80012e2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	f000 bc4a 	b.w	8001b76 <HAL_RCC_OscConfig+0xe32>
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012ec:	fa93 f2a3 	rbit	r2, r3
 80012f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012f4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012fa:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	b25b      	sxtb	r3, r3
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	b25b      	sxtb	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <HAL_RCC_OscConfig+0x5d4>
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	e01f      	b.n	8001358 <HAL_RCC_OscConfig+0x614>
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001322:	fa93 f2a3 	rbit	r2, r3
 8001326:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800132a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800132c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b25b      	sxtb	r3, r3
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	b25b      	sxtb	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d105      	bne.n	8001354 <HAL_RCC_OscConfig+0x610>
 8001348:	4b01      	ldr	r3, [pc, #4]	; (8001350 <HAL_RCC_OscConfig+0x60c>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	e004      	b.n	8001358 <HAL_RCC_OscConfig+0x614>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	4bb7      	ldr	r3, [pc, #732]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	2202      	movs	r2, #2
 800135a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001362:	fa92 f1a2 	rbit	r1, r2
 8001366:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800136a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800136c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	fab2 f282 	clz	r2, r2
 8001376:	b252      	sxtb	r2, r2
 8001378:	f042 0220 	orr.w	r2, r2, #32
 800137c:	b252      	sxtb	r2, r2
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f002 021f 	and.w	r2, r2, #31
 8001384:	40d3      	lsrs	r3, r2
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d19e      	bne.n	80012cc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80f9 	beq.w	8001590 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d07b      	beq.n	80014a0 <HAL_RCC_OscConfig+0x75c>
 80013a8:	2301      	movs	r3, #1
 80013aa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013c0:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b9b      	ldr	r3, [pc, #620]	; (8001638 <HAL_RCC_OscConfig+0x8f4>)
 80013cc:	4413      	add	r3, r2
 80013ce:	461a      	mov	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f001 f91a 	bl	800260c <HAL_GetTick>
 80013d8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013dc:	e009      	b.n	80013f2 <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f001 f915 	bl	800260c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e3c1      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013fc:	fa93 f2a3 	rbit	r2, r3
 8001400:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001404:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001406:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800140a:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	b25b      	sxtb	r3, r3
 8001412:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d102      	bne.n	8001428 <HAL_RCC_OscConfig+0x6e4>
 8001422:	4b84      	ldr	r3, [pc, #528]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	e01c      	b.n	8001462 <HAL_RCC_OscConfig+0x71e>
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001432:	fa93 f2a3 	rbit	r2, r3
 8001436:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800143a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800143c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b25b      	sxtb	r3, r3
 8001448:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	095b      	lsrs	r3, r3, #5
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d102      	bne.n	800145e <HAL_RCC_OscConfig+0x71a>
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	e001      	b.n	8001462 <HAL_RCC_OscConfig+0x71e>
 800145e:	4b75      	ldr	r3, [pc, #468]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	2202      	movs	r2, #2
 8001464:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800146c:	fa92 f1a2 	rbit	r1, r2
 8001470:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001474:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001476:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	fab2 f282 	clz	r2, r2
 8001480:	b252      	sxtb	r2, r2
 8001482:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001486:	b252      	sxtb	r2, r2
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f002 021f 	and.w	r2, r2, #31
 800148e:	40d3      	lsrs	r3, r2
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0a2      	beq.n	80013de <HAL_RCC_OscConfig+0x69a>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001498:	2001      	movs	r0, #1
 800149a:	f001 f8c1 	bl	8002620 <HAL_Delay>
 800149e:	e077      	b.n	8001590 <HAL_RCC_OscConfig+0x84c>
 80014a0:	2301      	movs	r3, #1
 80014a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014b2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014b8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b5d      	ldr	r3, [pc, #372]	; (8001638 <HAL_RCC_OscConfig+0x8f4>)
 80014c4:	4413      	add	r3, r2
 80014c6:	461a      	mov	r2, r3
 80014c8:	2300      	movs	r3, #0
 80014ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f001 f89e 	bl	800260c <HAL_GetTick>
 80014d0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e009      	b.n	80014ea <HAL_RCC_OscConfig+0x7a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f001 f899 	bl	800260c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x7a6>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e345      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001502:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	b25b      	sxtb	r3, r3
 800150a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800150e:	b25b      	sxtb	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <HAL_RCC_OscConfig+0x7dc>
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	e01c      	b.n	800155a <HAL_RCC_OscConfig+0x816>
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800152a:	fa93 f2a3 	rbit	r2, r3
 800152e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001532:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001534:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	b25b      	sxtb	r3, r3
 8001540:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001544:	b25b      	sxtb	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	095b      	lsrs	r3, r3, #5
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d102      	bne.n	8001556 <HAL_RCC_OscConfig+0x812>
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	e001      	b.n	800155a <HAL_RCC_OscConfig+0x816>
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	2202      	movs	r2, #2
 800155c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001564:	fa92 f1a2 	rbit	r1, r2
 8001568:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800156c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800156e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	fab2 f282 	clz	r2, r2
 8001578:	b252      	sxtb	r2, r2
 800157a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800157e:	b252      	sxtb	r2, r2
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	f002 021f 	and.w	r2, r2, #31
 8001586:	40d3      	lsrs	r3, r2
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1a2      	bne.n	80014d6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 813c 	beq.w	8001818 <HAL_RCC_OscConfig+0xad4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	4a24      	ldr	r2, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	61d3      	str	r3, [r2, #28]
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	681b      	ldr	r3, [r3, #0]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_RCC_OscConfig+0x8f8>)
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_RCC_OscConfig+0x8f8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f001 f81e 	bl	800260c <HAL_GetTick>
 80015d0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015d4:	e009      	b.n	80015ea <HAL_RCC_OscConfig+0x8a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f001 f819 	bl	800260c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x8a6>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e2c5      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_RCC_OscConfig+0x8f8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ef      	beq.n	80015d6 <HAL_RCC_OscConfig+0x892>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x8ca>
 8001600:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	e036      	b.n	800167c <HAL_RCC_OscConfig+0x938>
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d113      	bne.n	8001640 <HAL_RCC_OscConfig+0x8fc>
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001626:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_RCC_OscConfig+0x8f0>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	f023 0304 	bic.w	r3, r3, #4
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e024      	b.n	800167c <HAL_RCC_OscConfig+0x938>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	42420480 	.word	0x42420480
 800163c:	40007000 	.word	0x40007000
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x920>
 800164a:	4aac      	ldr	r2, [pc, #688]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 800164c:	4bab      	ldr	r3, [pc, #684]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	4aa9      	ldr	r2, [pc, #676]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 8001658:	4ba8      	ldr	r3, [pc, #672]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x938>
 8001664:	4aa5      	ldr	r2, [pc, #660]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 8001666:	4ba5      	ldr	r3, [pc, #660]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	4aa2      	ldr	r2, [pc, #648]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 8001672:	4ba2      	ldr	r3, [pc, #648]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d064      	beq.n	8001750 <HAL_RCC_OscConfig+0xa0c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f000 ffc1 	bl	800260c <HAL_GetTick>
 800168a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x964>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f000 ffbc 	bl	800260c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x964>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e266      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016b2:	fa93 f2a3 	rbit	r2, r3
 80016b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016c0:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x99a>
 80016d8:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x9d4>
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016e8:	fa93 f2a3 	rbit	r2, r3
 80016ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016f0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80016f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001702:	b25b      	sxtb	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0x9d0>
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	e001      	b.n	8001718 <HAL_RCC_OscConfig+0x9d4>
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	2202      	movs	r2, #2
 800171a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001722:	fa92 f1a2 	rbit	r1, r2
 8001726:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800172a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800172c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	fab2 f282 	clz	r2, r2
 8001736:	b252      	sxtb	r2, r2
 8001738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800173c:	b252      	sxtb	r2, r2
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	f002 021f 	and.w	r2, r2, #31
 8001744:	40d3      	lsrs	r3, r2
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0a0      	beq.n	8001690 <HAL_RCC_OscConfig+0x94c>
 800174e:	e063      	b.n	8001818 <HAL_RCC_OscConfig+0xad4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f000 ff5c 	bl	800260c <HAL_GetTick>
 8001754:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0xa2e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f000 ff57 	bl	800260c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xa2e>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e201      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800177c:	fa93 f2a3 	rbit	r2, r3
 8001780:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001784:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001786:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800178a:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b25b      	sxtb	r3, r3
 8001792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001796:	b25b      	sxtb	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0xa64>
 80017a2:	4b56      	ldr	r3, [pc, #344]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	e01c      	b.n	80017e2 <HAL_RCC_OscConfig+0xa9e>
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ba:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0xa9a>
 80017d8:	4b48      	ldr	r3, [pc, #288]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	e001      	b.n	80017e2 <HAL_RCC_OscConfig+0xa9e>
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	2202      	movs	r2, #2
 80017e4:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80017ec:	fa92 f1a2 	rbit	r1, r2
 80017f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017f4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fab2 f282 	clz	r2, r2
 8001800:	b252      	sxtb	r2, r2
 8001802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001806:	b252      	sxtb	r2, r2
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f002 021f 	and.w	r2, r2, #31
 800180e:	40d3      	lsrs	r3, r2
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1a0      	bne.n	800175a <HAL_RCC_OscConfig+0xa16>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 81a8 	beq.w	8001b74 <HAL_RCC_OscConfig+0xe30>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	f000 819f 	beq.w	8001b70 <HAL_RCC_OscConfig+0xe2c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b02      	cmp	r3, #2
 800183a:	f040 811b 	bne.w	8001a74 <HAL_RCC_OscConfig+0xd30>
 800183e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001842:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001852:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001854:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001858:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001864:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001868:	461a      	mov	r2, r3
 800186a:	2300      	movs	r3, #0
 800186c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f000 fecd 	bl	800260c <HAL_GetTick>
 8001872:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	e009      	b.n	800188c <HAL_RCC_OscConfig+0xb48>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f000 fec8 	bl	800260c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0xb48>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e174      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
 800188c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018a0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018a6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	f043 0320 	orr.w	r3, r3, #32
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d102      	bne.n	80018c4 <HAL_RCC_OscConfig+0xb80>
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e01f      	b.n	8001904 <HAL_RCC_OscConfig+0xbc0>
 80018c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018d0:	fa93 f2a3 	rbit	r2, r3
 80018d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80018da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	f043 0320 	orr.w	r3, r3, #32
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d104      	bne.n	8001900 <HAL_RCC_OscConfig+0xbbc>
 80018f6:	4b01      	ldr	r3, [pc, #4]	; (80018fc <HAL_RCC_OscConfig+0xbb8>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	e003      	b.n	8001904 <HAL_RCC_OscConfig+0xbc0>
 80018fc:	40021000 	.word	0x40021000
 8001900:	4b9f      	ldr	r3, [pc, #636]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001908:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001910:	fa92 f1a2 	rbit	r1, r2
 8001914:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001918:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800191a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b252      	sxtb	r2, r2
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	b252      	sxtb	r2, r2
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f002 021f 	and.w	r2, r2, #31
 8001932:	40d3      	lsrs	r3, r2
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d19d      	bne.n	8001878 <HAL_RCC_OscConfig+0xb34>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001946:	d109      	bne.n	800195c <HAL_RCC_OscConfig+0xc18>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001948:	498d      	ldr	r1, [pc, #564]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 800194a:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195c:	4888      	ldr	r0, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 800195e:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a19      	ldr	r1, [r3, #32]
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	430b      	orrs	r3, r1
 8001974:	4313      	orrs	r3, r2
 8001976:	6043      	str	r3, [r0, #4]
 8001978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800197c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800198e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001992:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800199e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80019a2:	461a      	mov	r2, r3
 80019a4:	2301      	movs	r3, #1
 80019a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f000 fe30 	bl	800260c <HAL_GetTick>
 80019ac:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b0:	e009      	b.n	80019c6 <HAL_RCC_OscConfig+0xc82>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b2:	f000 fe2b 	bl	800260c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xc82>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0d7      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
 80019c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	095b      	lsrs	r3, r3, #5
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0xcba>
 80019f8:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	e01d      	b.n	8001a3a <HAL_RCC_OscConfig+0xcf6>
 80019fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	095b      	lsrs	r3, r3, #5
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d102      	bne.n	8001a36 <HAL_RCC_OscConfig+0xcf2>
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	e001      	b.n	8001a3a <HAL_RCC_OscConfig+0xcf6>
 8001a36:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001a46:	fa92 f1a2 	rbit	r1, r2
 8001a4a:	f107 021c 	add.w	r2, r7, #28
 8001a4e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a50:	f107 021c 	add.w	r2, r7, #28
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	fab2 f282 	clz	r2, r2
 8001a5a:	b252      	sxtb	r2, r2
 8001a5c:	f042 0220 	orr.w	r2, r2, #32
 8001a60:	b252      	sxtb	r2, r2
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	f002 021f 	and.w	r2, r2, #31
 8001a68:	40d3      	lsrs	r3, r2
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d09f      	beq.n	80019b2 <HAL_RCC_OscConfig+0xc6e>
 8001a72:	e07f      	b.n	8001b74 <HAL_RCC_OscConfig+0xe30>
 8001a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a8a:	f107 0318 	add.w	r3, r7, #24
 8001a8e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001a9a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f000 fdb2 	bl	800260c <HAL_GetTick>
 8001aa8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_OscConfig+0xd7e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aae:	f000 fdad 	bl	800260c <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xd7e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e059      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
 8001ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	f043 0320 	orr.w	r3, r3, #32
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_OscConfig+0xdb6>
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	e01d      	b.n	8001b36 <HAL_RCC_OscConfig+0xdf2>
 8001afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_OscConfig+0xdee>
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	e001      	b.n	8001b36 <HAL_RCC_OscConfig+0xdf2>
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_RCC_OscConfig+0xe3c>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001b42:	fa92 f1a2 	rbit	r1, r2
 8001b46:	f107 020c 	add.w	r2, r7, #12
 8001b4a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b4c:	f107 020c 	add.w	r2, r7, #12
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b252      	sxtb	r2, r2
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	b252      	sxtb	r2, r2
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	40d3      	lsrs	r3, r2
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d19f      	bne.n	8001aae <HAL_RCC_OscConfig+0xd6a>
 8001b6e:	e001      	b.n	8001b74 <HAL_RCC_OscConfig+0xe30>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0xe32>
    }
  }
  
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b098      	sub	sp, #96	; 0x60
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b92:	4ba5      	ldr	r3, [pc, #660]	; (8001e28 <HAL_RCC_ClockConfig+0x2a4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0207 	and.w	r2, r3, #7
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d210      	bcs.n	8001bc2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba0:	49a1      	ldr	r1, [pc, #644]	; (8001e28 <HAL_RCC_ClockConfig+0x2a4>)
 8001ba2:	4ba1      	ldr	r3, [pc, #644]	; (8001e28 <HAL_RCC_ClockConfig+0x2a4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 0207 	bic.w	r2, r3, #7
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bb0:	4b9d      	ldr	r3, [pc, #628]	; (8001e28 <HAL_RCC_ClockConfig+0x2a4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0207 	and.w	r2, r3, #7
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e18f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x35e>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bce:	4997      	ldr	r1, [pc, #604]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001bd0:	4b96      	ldr	r3, [pc, #600]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8127 	beq.w	8001e3c <HAL_RCC_ClockConfig+0x2b8>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d146      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x100>
 8001bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	f043 0320 	orr.w	r3, r3, #32
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	095b      	lsrs	r3, r3, #5
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x9e>
 8001c1c:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	e017      	b.n	8001c52 <HAL_RCC_ClockConfig+0xce>
 8001c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c26:	65bb      	str	r3, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xca>
 8001c48:	4b78      	ldr	r3, [pc, #480]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	e001      	b.n	8001c52 <HAL_RCC_ClockConfig+0xce>
 8001c4e:	4b77      	ldr	r3, [pc, #476]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c56:	657a      	str	r2, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c5a:	fa92 f2a2 	rbit	r2, r2
 8001c5e:	62ba      	str	r2, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c62:	fab2 f282 	clz	r2, r2
 8001c66:	b252      	sxtb	r2, r2
 8001c68:	f042 0220 	orr.w	r2, r2, #32
 8001c6c:	b252      	sxtb	r2, r2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f002 021f 	and.w	r2, r2, #31
 8001c74:	40d3      	lsrs	r3, r2
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 808f 	bne.w	8001d9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e12e      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d145      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x194>
 8001c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c90:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	f043 0320 	orr.w	r3, r3, #32
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x134>
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e017      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x164>
 8001cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x160>
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	e001      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x164>
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cec:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	61fa      	str	r2, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b252      	sxtb	r2, r2
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	b252      	sxtb	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f002 021f 	and.w	r2, r2, #31
 8001d0a:	40d3      	lsrs	r3, r2
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d144      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0e4      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x35e>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d24:	69bb      	ldr	r3, [r7, #24]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	f043 0320 	orr.w	r3, r3, #32
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	095b      	lsrs	r3, r3, #5
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x1be>
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e016      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1ec>
 8001d42:	2302      	movs	r3, #2
 8001d44:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	f043 0320 	orr.w	r3, r3, #32
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x1e8>
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	e001      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1ec>
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2202      	movs	r2, #2
 8001d72:	63fa      	str	r2, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d76:	fa92 f2a2 	rbit	r2, r2
 8001d7a:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	fab2 f282 	clz	r2, r2
 8001d82:	b252      	sxtb	r2, r2
 8001d84:	f042 0220 	orr.w	r2, r2, #32
 8001d88:	b252      	sxtb	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f002 021f 	and.w	r2, r2, #31
 8001d90:	40d3      	lsrs	r3, r2
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0a1      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9e:	4923      	ldr	r1, [pc, #140]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 0203 	bic.w	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db0:	f000 fc2c 	bl	800260c <HAL_GetTick>
 8001db4:	65f8      	str	r0, [r7, #92]	; 0x5c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d112      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x260>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x252>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f000 fc24 	bl	800260c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x252>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e085      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x35e>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d1ee      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x23c>
 8001de2:	e02b      	b.n	8001e3c <HAL_RCC_ClockConfig+0x2b8>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d121      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x2ac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_ClockConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dee:	f000 fc0d 	bl	800260c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e06e      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x35e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_RCC_ClockConfig+0x2a8>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_ClockConfig+0x26a>
 8001e10:	e014      	b.n	8001e3c <HAL_RCC_ClockConfig+0x2b8>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e12:	f000 fbfb 	bl	800260c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d905      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e05c      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x35e>
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40021000 	.word	0x40021000
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <HAL_RCC_ClockConfig+0x368>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ea      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x28e>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_RCC_ClockConfig+0x36c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0207 	and.w	r2, r3, #7
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d910      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x2e8>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4929      	ldr	r1, [pc, #164]	; (8001ef0 <HAL_RCC_ClockConfig+0x36c>)
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_RCC_ClockConfig+0x36c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 0207 	bic.w	r2, r3, #7
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e5a:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_RCC_ClockConfig+0x36c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0207 	and.w	r2, r3, #7
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x2e8>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x35e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	491c      	ldr	r1, [pc, #112]	; (8001eec <HAL_RCC_ClockConfig+0x368>)
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <HAL_RCC_ClockConfig+0x368>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e96:	4915      	ldr	r1, [pc, #84]	; (8001eec <HAL_RCC_ClockConfig+0x368>)
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_RCC_ClockConfig+0x368>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eaa:	f000 f827 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eae:	4601      	mov	r1, r0
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_RCC_ClockConfig+0x368>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb8:	23f0      	movs	r3, #240	; 0xf0
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x370>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_RCC_ClockConfig+0x374>)
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 fb6c 	bl	80025b8 <HAL_InitTick>
  
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3760      	adds	r7, #96	; 0x60
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	08002778 	.word	0x08002778
 8001ef8:	200000dc 	.word	0x200000dc

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b490      	push	{r4, r7}
 8001efe:	b08e      	sub	sp, #56	; 0x38
 8001f00:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f02:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f04:	1d3c      	adds	r4, r7, #4
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001f10:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001f12:	463b      	mov	r3, r7
 8001f14:	8812      	ldrh	r2, [r2, #0]
 8001f16:	801a      	strh	r2, [r3, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d002      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x46>
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d003      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x4c>
 8001f40:	e043      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f46:	e043      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001f52:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01e      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0xbe>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb8:	e004      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xc8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fc8:	e002      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xd4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3738      	adds	r7, #56	; 0x38
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc90      	pop	{r4, r7}
 8001fda:	4770      	bx	lr
 8001fdc:	08002764 	.word	0x08002764
 8001fe0:	08002774 	.word	0x08002774
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	003d0900 	.word	0x003d0900

08001ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	200000dc 	.word	0x200000dc

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800200a:	f7ff fff1 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 800200e:	4601      	mov	r1, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002018:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800201c:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	08002788 	.word	0x08002788

08002048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800204e:	f7ff ffcf 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002052:	4601      	mov	r1, r0
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800205c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002060:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	08002788 	.word	0x08002788

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b08b      	sub	sp, #44	; 0x2c
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	e127      	b.n	8002300 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020b0:	2201      	movs	r2, #1
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8116 	bne.w	80022fa <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b12      	cmp	r3, #18
 80020d4:	d034      	beq.n	8002140 <HAL_GPIO_Init+0xb4>
 80020d6:	2b12      	cmp	r3, #18
 80020d8:	d80d      	bhi.n	80020f6 <HAL_GPIO_Init+0x6a>
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d02b      	beq.n	8002136 <HAL_GPIO_Init+0xaa>
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d804      	bhi.n	80020ec <HAL_GPIO_Init+0x60>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d031      	beq.n	800214a <HAL_GPIO_Init+0xbe>
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d01c      	beq.n	8002124 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80020ea:	e048      	b.n	800217e <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d043      	beq.n	8002178 <HAL_GPIO_Init+0xec>
 80020f0:	2b11      	cmp	r3, #17
 80020f2:	d01b      	beq.n	800212c <HAL_GPIO_Init+0xa0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80020f4:	e043      	b.n	800217e <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020f6:	4a87      	ldr	r2, [pc, #540]	; (8002314 <HAL_GPIO_Init+0x288>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d026      	beq.n	800214a <HAL_GPIO_Init+0xbe>
 80020fc:	4a85      	ldr	r2, [pc, #532]	; (8002314 <HAL_GPIO_Init+0x288>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d806      	bhi.n	8002110 <HAL_GPIO_Init+0x84>
 8002102:	4a85      	ldr	r2, [pc, #532]	; (8002318 <HAL_GPIO_Init+0x28c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d020      	beq.n	800214a <HAL_GPIO_Init+0xbe>
 8002108:	4a84      	ldr	r2, [pc, #528]	; (800231c <HAL_GPIO_Init+0x290>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01d      	beq.n	800214a <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800210e:	e036      	b.n	800217e <HAL_GPIO_Init+0xf2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002110:	4a83      	ldr	r2, [pc, #524]	; (8002320 <HAL_GPIO_Init+0x294>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <HAL_GPIO_Init+0xbe>
 8002116:	4a83      	ldr	r2, [pc, #524]	; (8002324 <HAL_GPIO_Init+0x298>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d016      	beq.n	800214a <HAL_GPIO_Init+0xbe>
 800211c:	4a82      	ldr	r2, [pc, #520]	; (8002328 <HAL_GPIO_Init+0x29c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0xbe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8002122:	e02c      	b.n	800217e <HAL_GPIO_Init+0xf2>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e028      	b.n	800217e <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	3304      	adds	r3, #4
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e023      	b.n	800217e <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	3308      	adds	r3, #8
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e01e      	b.n	800217e <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	330c      	adds	r3, #12
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e019      	b.n	800217e <HAL_GPIO_Init+0xf2>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_GPIO_Init+0xcc>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002152:	2304      	movs	r3, #4
 8002154:	623b      	str	r3, [r7, #32]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
          }
          break; 
 8002156:	e012      	b.n	800217e <HAL_GPIO_Init+0xf2>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_GPIO_Init+0xe0>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	611a      	str	r2, [r3, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
          }
          break; 
 800216a:	e008      	b.n	800217e <HAL_GPIO_Init+0xf2>
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800216c:	2308      	movs	r3, #8
 800216e:	623b      	str	r3, [r7, #32]
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	615a      	str	r2, [r3, #20]
          }
          break; 
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0xf2>
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	bf00      	nop
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2bff      	cmp	r3, #255	; 0xff
 8002182:	d801      	bhi.n	8002188 <HAL_GPIO_Init+0xfc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	e001      	b.n	800218c <HAL_GPIO_Init+0x100>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2bff      	cmp	r3, #255	; 0xff
 8002192:	d802      	bhi.n	800219a <HAL_GPIO_Init+0x10e>
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_Init+0x114>
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	3b08      	subs	r3, #8
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	210f      	movs	r1, #15
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	401a      	ands	r2, r3
 80021b2:	6a39      	ldr	r1, [r7, #32]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	431a      	orrs	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8096 	beq.w	80022fa <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ce:	4a57      	ldr	r2, [pc, #348]	; (800232c <HAL_GPIO_Init+0x2a0>)
 80021d0:	4b56      	ldr	r3, [pc, #344]	; (800232c <HAL_GPIO_Init+0x2a0>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6193      	str	r3, [r2, #24]
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <HAL_GPIO_Init+0x2a0>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 80021e6:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_GPIO_Init+0x2a4>)
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4013      	ands	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a49      	ldr	r2, [pc, #292]	; (8002334 <HAL_GPIO_Init+0x2a8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0x1ae>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a48      	ldr	r2, [pc, #288]	; (8002338 <HAL_GPIO_Init+0x2ac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x1aa>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a47      	ldr	r2, [pc, #284]	; (800233c <HAL_GPIO_Init+0x2b0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x1a6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a46      	ldr	r2, [pc, #280]	; (8002340 <HAL_GPIO_Init+0x2b4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x1a2>
 800222a:	2303      	movs	r3, #3
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x1b0>
 800222e:	2304      	movs	r3, #4
 8002230:	e004      	b.n	800223c <HAL_GPIO_Init+0x1b0>
 8002232:	2302      	movs	r3, #2
 8002234:	e002      	b.n	800223c <HAL_GPIO_Init+0x1b0>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_GPIO_Init+0x1b0>
 800223a:	2300      	movs	r3, #0
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	4093      	lsls	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 800224c:	4938      	ldr	r1, [pc, #224]	; (8002330 <HAL_GPIO_Init+0x2a4>)
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8002266:	4937      	ldr	r1, [pc, #220]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
 8002272:	e006      	b.n	8002282 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8002274:	4933      	ldr	r1, [pc, #204]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	43db      	mvns	r3, r3
 800227e:	4013      	ands	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800228e:	492d      	ldr	r1, [pc, #180]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
 800229a:	e006      	b.n	80022aa <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800229c:	4929      	ldr	r1, [pc, #164]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4013      	ands	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80022b6:	4923      	ldr	r1, [pc, #140]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
 80022c2:	e006      	b.n	80022d2 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80022c4:	491f      	ldr	r1, [pc, #124]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4013      	ands	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80022de:	4919      	ldr	r1, [pc, #100]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60cb      	str	r3, [r1, #12]
 80022ea:	e006      	b.n	80022fa <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80022ec:	4915      	ldr	r1, [pc, #84]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4013      	ands	r3, r2
 80022f8:	60cb      	str	r3, [r1, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	3301      	adds	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	2b0f      	cmp	r3, #15
 8002304:	f67f aed4 	bls.w	80020b0 <HAL_GPIO_Init+0x24>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8002308:	bf00      	nop
 800230a:	372c      	adds	r7, #44	; 0x2c
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	10210000 	.word	0x10210000
 8002318:	10110000 	.word	0x10110000
 800231c:	10120000 	.word	0x10120000
 8002320:	10310000 	.word	0x10310000
 8002324:	10320000 	.word	0x10320000
 8002328:	10220000 	.word	0x10220000
 800232c:	40021000 	.word	0x40021000
 8002330:	40010000 	.word	0x40010000
 8002334:	40010800 	.word	0x40010800
 8002338:	40010c00 	.word	0x40010c00
 800233c:	40011000 	.word	0x40011000
 8002340:	40011400 	.word	0x40011400
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002364:	e003      	b.n	800236e <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	041a      	lsls	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	611a      	str	r2, [r3, #16]
  }
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023cc:	0a1b      	lsrs	r3, r3, #8
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da0b      	bge.n	8002408 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	490d      	ldr	r1, [pc, #52]	; (8002428 <NVIC_SetPriority+0x4c>)
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	3b04      	subs	r3, #4
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002406:	e009      	b.n	800241c <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	4908      	ldr	r1, [pc, #32]	; (800242c <NVIC_SetPriority+0x50>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00
 800242c:	e000e100 	.word	0xe000e100

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	2201      	movs	r2, #1
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	401a      	ands	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002476:	2101      	movs	r1, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	1e59      	subs	r1, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002484:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f7ff ff92 	bl	80023dc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff4b 	bl	8002378 <NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop

080024ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fe:	f7ff ff5f 	bl	80023c0 <NVIC_GetPriorityGrouping>
 8002502:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	6978      	ldr	r0, [r7, #20]
 800250a:	f7ff ff91 	bl	8002430 <NVIC_EncodePriority>
 800250e:	4602      	mov	r2, r0
 8002510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff60 	bl	80023dc <NVIC_SetPriority>
}
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffaf 	bl	8002490 <SysTick_Config>
 8002532:	4603      	mov	r3, r0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b04      	cmp	r3, #4
 8002548:	d106      	bne.n	8002558 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002556:	e005      	b.n	8002564 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002558:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0304 	bic.w	r3, r3, #4
 8002562:	6013      	str	r3, [r2, #0]
  }
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002578:	f000 f802 	bl	8002580 <HAL_SYSTICK_Callback>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002590:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_Init+0x28>)
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_Init+0x28>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f043 0310 	orr.w	r3, r3, #16
 800259a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259c:	2003      	movs	r0, #3
 800259e:	f7ff ff99 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f000 f808 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a8:	f7fd fde4 	bl	8000174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80025c0:	f7ff fd16 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_InitTick+0x34>)
 80025c8:	fba3 2302 	umull	r2, r3, r3, r2
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ffa8 	bl	8002524 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f7ff ff86 	bl	80024ec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	10624dd3 	.word	0x10624dd3

080025f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick++;
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <HAL_IncTick+0x18>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4a03      	ldr	r2, [pc, #12]	; (8002608 <HAL_IncTick+0x18>)
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000100 	.word	0x20000100

0800260c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_GetTick+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	20000100 	.word	0x20000100

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800262c:	f7ff ffee 	bl	800260c <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002632:	bf00      	nop
 8002634:	f7ff ffea 	bl	800260c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3f7      	bcc.n	8002634 <HAL_Delay+0x14>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <SystemInit+0x5c>)
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <SystemInit+0x5c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800265c:	4912      	ldr	r1, [pc, #72]	; (80026a8 <SystemInit+0x5c>)
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <SystemInit+0x5c>)
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <SystemInit+0x60>)
 8002664:	4013      	ands	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002668:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <SystemInit+0x5c>)
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <SystemInit+0x5c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <SystemInit+0x5c>)
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <SystemInit+0x5c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002682:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002684:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <SystemInit+0x5c>)
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <SystemInit+0x5c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800268e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <SystemInit+0x5c>)
 8002692:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002696:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SystemInit+0x64>)
 800269a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800269e:	609a      	str	r2, [r3, #8]
#endif 
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	f8ff0000 	.word	0xf8ff0000
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026b6:	e003      	b.n	80026c0 <LoopCopyDataInit>

080026b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026be:	3104      	adds	r1, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026c8:	d3f6      	bcc.n	80026b8 <CopyDataInit>
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026cc:	e002      	b.n	80026d4 <LoopFillZerobss>

080026ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026d0:	f842 3b04 	str.w	r3, [r2], #4

080026d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026d8:	d3f9      	bcc.n	80026ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026da:	f7ff ffb7 	bl	800264c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026de:	f000 f80f 	bl	8002700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026e2:	f7fd ff5b 	bl	800059c <main>
  bx lr
 80026e6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80026e8:	08002798 	.word	0x08002798
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026f0:	200000e0 	.word	0x200000e0
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80026f4:	200000e0 	.word	0x200000e0
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80026f8:	200001bc 	.word	0x200001bc

080026fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC1_2_IRQHandler>
	...

08002700 <__libc_init_array>:
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <__libc_init_array+0x3c>)
 8002702:	b570      	push	{r4, r5, r6, lr}
 8002704:	461e      	mov	r6, r3
 8002706:	4c0e      	ldr	r4, [pc, #56]	; (8002740 <__libc_init_array+0x40>)
 8002708:	2500      	movs	r5, #0
 800270a:	1ae4      	subs	r4, r4, r3
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	42a5      	cmp	r5, r4
 8002710:	d004      	beq.n	800271c <__libc_init_array+0x1c>
 8002712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002716:	4798      	blx	r3
 8002718:	3501      	adds	r5, #1
 800271a:	e7f8      	b.n	800270e <__libc_init_array+0xe>
 800271c:	f000 f816 	bl	800274c <_init>
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <__libc_init_array+0x44>)
 8002722:	4c09      	ldr	r4, [pc, #36]	; (8002748 <__libc_init_array+0x48>)
 8002724:	461e      	mov	r6, r3
 8002726:	1ae4      	subs	r4, r4, r3
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	2500      	movs	r5, #0
 800272c:	42a5      	cmp	r5, r4
 800272e:	d004      	beq.n	800273a <__libc_init_array+0x3a>
 8002730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002734:	4798      	blx	r3
 8002736:	3501      	adds	r5, #1
 8002738:	e7f8      	b.n	800272c <__libc_init_array+0x2c>
 800273a:	bd70      	pop	{r4, r5, r6, pc}
 800273c:	08002790 	.word	0x08002790
 8002740:	08002790 	.word	0x08002790
 8002744:	08002790 	.word	0x08002790
 8002748:	08002794 	.word	0x08002794

0800274c <_init>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr

08002758 <_fini>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr
